#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BolnicaVezba
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Bolnica")]
	public partial class BolnicaBazaDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertPacijent(Pacijent instance);
    partial void UpdatePacijent(Pacijent instance);
    partial void DeletePacijent(Pacijent instance);
    partial void InsertSoba(Soba instance);
    partial void UpdateSoba(Soba instance);
    partial void DeleteSoba(Soba instance);
    partial void InsertOdeljenje(Odeljenje instance);
    partial void UpdateOdeljenje(Odeljenje instance);
    partial void DeleteOdeljenje(Odeljenje instance);
    #endregion
		
		public BolnicaBazaDataContext() : 
				base(global::BolnicaVezba.Properties.Settings.Default.BolnicaConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BolnicaBazaDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BolnicaBazaDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BolnicaBazaDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BolnicaBazaDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Pacijent> Pacijents
		{
			get
			{
				return this.GetTable<Pacijent>();
			}
		}
		
		public System.Data.Linq.Table<Soba> Sobas
		{
			get
			{
				return this.GetTable<Soba>();
			}
		}
		
		public System.Data.Linq.Table<Odeljenje> Odeljenjes
		{
			get
			{
				return this.GetTable<Odeljenje>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pacijent")]
	public partial class Pacijent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IDPacijent;
		
		private string _Ime;
		
		private string _Prezime;
		
		private string _Prioritet;
		
		private System.Nullable<int> _BrDana;
		
		private int _OdeljenjeID;
		
		private int _SobaID;
		
		private EntityRef<Soba> _Soba;
		
		private EntityRef<Odeljenje> _Odeljenje;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDPacijentChanging(int value);
    partial void OnIDPacijentChanged();
    partial void OnImeChanging(string value);
    partial void OnImeChanged();
    partial void OnPrezimeChanging(string value);
    partial void OnPrezimeChanged();
    partial void OnPrioritetChanging(string value);
    partial void OnPrioritetChanged();
    partial void OnBrDanaChanging(System.Nullable<int> value);
    partial void OnBrDanaChanged();
    partial void OnOdeljenjeIDChanging(int value);
    partial void OnOdeljenjeIDChanged();
    partial void OnSobaIDChanging(int value);
    partial void OnSobaIDChanged();
    #endregion
		
		public Pacijent()
		{
			this._Soba = default(EntityRef<Soba>);
			this._Odeljenje = default(EntityRef<Odeljenje>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IDPacijent", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IDPacijent
		{
			get
			{
				return this._IDPacijent;
			}
			set
			{
				if ((this._IDPacijent != value))
				{
					this.OnIDPacijentChanging(value);
					this.SendPropertyChanging();
					this._IDPacijent = value;
					this.SendPropertyChanged("IDPacijent");
					this.OnIDPacijentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ime", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Ime
		{
			get
			{
				return this._Ime;
			}
			set
			{
				if ((this._Ime != value))
				{
					this.OnImeChanging(value);
					this.SendPropertyChanging();
					this._Ime = value;
					this.SendPropertyChanged("Ime");
					this.OnImeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prezime", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Prezime
		{
			get
			{
				return this._Prezime;
			}
			set
			{
				if ((this._Prezime != value))
				{
					this.OnPrezimeChanging(value);
					this.SendPropertyChanging();
					this._Prezime = value;
					this.SendPropertyChanged("Prezime");
					this.OnPrezimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prioritet", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Prioritet
		{
			get
			{
				return this._Prioritet;
			}
			set
			{
				if ((this._Prioritet != value))
				{
					this.OnPrioritetChanging(value);
					this.SendPropertyChanging();
					this._Prioritet = value;
					this.SendPropertyChanged("Prioritet");
					this.OnPrioritetChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BrDana", DbType="Int")]
		public System.Nullable<int> BrDana
		{
			get
			{
				return this._BrDana;
			}
			set
			{
				if ((this._BrDana != value))
				{
					this.OnBrDanaChanging(value);
					this.SendPropertyChanging();
					this._BrDana = value;
					this.SendPropertyChanged("BrDana");
					this.OnBrDanaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OdeljenjeID", DbType="Int NOT NULL")]
		public int OdeljenjeID
		{
			get
			{
				return this._OdeljenjeID;
			}
			set
			{
				if ((this._OdeljenjeID != value))
				{
					if (this._Odeljenje.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOdeljenjeIDChanging(value);
					this.SendPropertyChanging();
					this._OdeljenjeID = value;
					this.SendPropertyChanged("OdeljenjeID");
					this.OnOdeljenjeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SobaID", DbType="Int NOT NULL")]
		public int SobaID
		{
			get
			{
				return this._SobaID;
			}
			set
			{
				if ((this._SobaID != value))
				{
					if (this._Soba.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSobaIDChanging(value);
					this.SendPropertyChanging();
					this._SobaID = value;
					this.SendPropertyChanged("SobaID");
					this.OnSobaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Soba_Pacijent", Storage="_Soba", ThisKey="SobaID", OtherKey="SobaID", IsForeignKey=true)]
		public Soba Soba
		{
			get
			{
				return this._Soba.Entity;
			}
			set
			{
				Soba previousValue = this._Soba.Entity;
				if (((previousValue != value) 
							|| (this._Soba.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Soba.Entity = null;
						previousValue.Pacijents.Remove(this);
					}
					this._Soba.Entity = value;
					if ((value != null))
					{
						value.Pacijents.Add(this);
						this._SobaID = value.SobaID;
					}
					else
					{
						this._SobaID = default(int);
					}
					this.SendPropertyChanged("Soba");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Odeljenje_Pacijent", Storage="_Odeljenje", ThisKey="OdeljenjeID", OtherKey="OdeljenjeID", IsForeignKey=true)]
		public Odeljenje Odeljenje
		{
			get
			{
				return this._Odeljenje.Entity;
			}
			set
			{
				Odeljenje previousValue = this._Odeljenje.Entity;
				if (((previousValue != value) 
							|| (this._Odeljenje.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Odeljenje.Entity = null;
						previousValue.Pacijents.Remove(this);
					}
					this._Odeljenje.Entity = value;
					if ((value != null))
					{
						value.Pacijents.Add(this);
						this._OdeljenjeID = value.OdeljenjeID;
					}
					else
					{
						this._OdeljenjeID = default(int);
					}
					this.SendPropertyChanged("Odeljenje");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Soba")]
	public partial class Soba : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SobaID;
		
		private int _OdeljenjeID;
		
		private int _Sprat;
		
		private EntitySet<Pacijent> _Pacijents;
		
		private EntityRef<Odeljenje> _Odeljenje;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSobaIDChanging(int value);
    partial void OnSobaIDChanged();
    partial void OnOdeljenjeIDChanging(int value);
    partial void OnOdeljenjeIDChanged();
    partial void OnSpratChanging(int value);
    partial void OnSpratChanged();
    #endregion
		
		public Soba()
		{
			this._Pacijents = new EntitySet<Pacijent>(new Action<Pacijent>(this.attach_Pacijents), new Action<Pacijent>(this.detach_Pacijents));
			this._Odeljenje = default(EntityRef<Odeljenje>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SobaID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int SobaID
		{
			get
			{
				return this._SobaID;
			}
			set
			{
				if ((this._SobaID != value))
				{
					this.OnSobaIDChanging(value);
					this.SendPropertyChanging();
					this._SobaID = value;
					this.SendPropertyChanged("SobaID");
					this.OnSobaIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OdeljenjeID", DbType="Int NOT NULL")]
		public int OdeljenjeID
		{
			get
			{
				return this._OdeljenjeID;
			}
			set
			{
				if ((this._OdeljenjeID != value))
				{
					if (this._Odeljenje.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOdeljenjeIDChanging(value);
					this.SendPropertyChanging();
					this._OdeljenjeID = value;
					this.SendPropertyChanged("OdeljenjeID");
					this.OnOdeljenjeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Sprat", DbType="Int NOT NULL")]
		public int Sprat
		{
			get
			{
				return this._Sprat;
			}
			set
			{
				if ((this._Sprat != value))
				{
					this.OnSpratChanging(value);
					this.SendPropertyChanging();
					this._Sprat = value;
					this.SendPropertyChanged("Sprat");
					this.OnSpratChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Soba_Pacijent", Storage="_Pacijents", ThisKey="SobaID", OtherKey="SobaID")]
		public EntitySet<Pacijent> Pacijents
		{
			get
			{
				return this._Pacijents;
			}
			set
			{
				this._Pacijents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Odeljenje_Soba", Storage="_Odeljenje", ThisKey="OdeljenjeID", OtherKey="OdeljenjeID", IsForeignKey=true)]
		public Odeljenje Odeljenje
		{
			get
			{
				return this._Odeljenje.Entity;
			}
			set
			{
				Odeljenje previousValue = this._Odeljenje.Entity;
				if (((previousValue != value) 
							|| (this._Odeljenje.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Odeljenje.Entity = null;
						previousValue.Sobas.Remove(this);
					}
					this._Odeljenje.Entity = value;
					if ((value != null))
					{
						value.Sobas.Add(this);
						this._OdeljenjeID = value.OdeljenjeID;
					}
					else
					{
						this._OdeljenjeID = default(int);
					}
					this.SendPropertyChanged("Odeljenje");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pacijents(Pacijent entity)
		{
			this.SendPropertyChanging();
			entity.Soba = this;
		}
		
		private void detach_Pacijents(Pacijent entity)
		{
			this.SendPropertyChanging();
			entity.Soba = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Odeljenje")]
	public partial class Odeljenje : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _OdeljenjeID;
		
		private string _Naziv;
		
		private EntitySet<Pacijent> _Pacijents;
		
		private EntitySet<Soba> _Sobas;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOdeljenjeIDChanging(int value);
    partial void OnOdeljenjeIDChanged();
    partial void OnNazivChanging(string value);
    partial void OnNazivChanged();
    #endregion
		
		public Odeljenje()
		{
			this._Pacijents = new EntitySet<Pacijent>(new Action<Pacijent>(this.attach_Pacijents), new Action<Pacijent>(this.detach_Pacijents));
			this._Sobas = new EntitySet<Soba>(new Action<Soba>(this.attach_Sobas), new Action<Soba>(this.detach_Sobas));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OdeljenjeID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int OdeljenjeID
		{
			get
			{
				return this._OdeljenjeID;
			}
			set
			{
				if ((this._OdeljenjeID != value))
				{
					this.OnOdeljenjeIDChanging(value);
					this.SendPropertyChanging();
					this._OdeljenjeID = value;
					this.SendPropertyChanged("OdeljenjeID");
					this.OnOdeljenjeIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Naziv", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Naziv
		{
			get
			{
				return this._Naziv;
			}
			set
			{
				if ((this._Naziv != value))
				{
					this.OnNazivChanging(value);
					this.SendPropertyChanging();
					this._Naziv = value;
					this.SendPropertyChanged("Naziv");
					this.OnNazivChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Odeljenje_Pacijent", Storage="_Pacijents", ThisKey="OdeljenjeID", OtherKey="OdeljenjeID")]
		public EntitySet<Pacijent> Pacijents
		{
			get
			{
				return this._Pacijents;
			}
			set
			{
				this._Pacijents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Odeljenje_Soba", Storage="_Sobas", ThisKey="OdeljenjeID", OtherKey="OdeljenjeID")]
		public EntitySet<Soba> Sobas
		{
			get
			{
				return this._Sobas;
			}
			set
			{
				this._Sobas.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pacijents(Pacijent entity)
		{
			this.SendPropertyChanging();
			entity.Odeljenje = this;
		}
		
		private void detach_Pacijents(Pacijent entity)
		{
			this.SendPropertyChanging();
			entity.Odeljenje = null;
		}
		
		private void attach_Sobas(Soba entity)
		{
			this.SendPropertyChanging();
			entity.Odeljenje = this;
		}
		
		private void detach_Sobas(Soba entity)
		{
			this.SendPropertyChanging();
			entity.Odeljenje = null;
		}
	}
}
#pragma warning restore 1591
